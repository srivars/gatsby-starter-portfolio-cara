{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/srivars/gatsby-starter-portfolio-cara/blob/main/share%20market%20based%20unemployment%20prediction%20using%20neutral%20network\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers"
      ],
      "metadata": {
        "id": "ccD8Xt5Tv_N5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('/content/Unemployment Rate, S&P 500 Index, N sr.txt')\n"
      ],
      "metadata": {
        "id": "TC6YdpEawBj7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_features = train_data.iloc[:, 1:].astype(np.float32)\n",
        "test_features = test_data.iloc[:, 1:].astype(np.float32)\n",
        "\n",
        "train_labels = train_data.iloc[:, 0].astype(np.float32)\n",
        "test_labels = test_data.iloc[:, 0].astype(np.float32)\n",
        "\n",
        "train_mean = train_features.mean(axis=0)\n",
        "train_std = train_features.std(axis=0)\n",
        "\n",
        "train_features = (train_features - train_mean) / train_std\n",
        "test_features = (test_features - train_mean) / train_std\n",
        "\n",
        "train_labels_mean = train_labels.mean()\n",
        "train_labels_std = train_labels.std()\n",
        "\n",
        "train_labels = (train_labels - train_labels_mean) / train_labels_std\n",
        "test_labels = (test_labels - train_labels_mean) / train_labels_std"
      ],
      "metadata": {
        "id": "FDwFOICDwzYC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data = data.sample(frac=0.8, random_state=0)\n",
        "test_data = data.drop(train_data.index)\n"
      ],
      "metadata": {
        "id": "Te9NB3tuwuGJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = keras.Sequential([\n",
        "    layers.Dense(64, activation='relu', input_shape=[train_features.shape[1]]),\n",
        "    layers.Dense(64, activation='relu'),\n",
        "    layers.Dense(1)\n",
        "])\n"
      ],
      "metadata": {
        "id": "aY-XGWBvw2mB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss='mse', optimizer=tf.keras.optimizers.Adam(0.001))\n"
      ],
      "metadata": {
        "id": "tT5qpff8w6uq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(train_features, train_labels, epochs=100,\n",
        "                    validation_split=0.2, verbose=0)\n"
      ],
      "metadata": {
        "id": "lnEPdvlpw_dr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "Lz9ve54mxD_8",
        "outputId": "b3236719-1b8e-4e5a-a6c4-f6b596c2b88e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_loss = model.evaluate(test_features, test_labels)\n",
        "test_rmse = np.sqrt(test_loss) * train_labels_std\n",
        "print('Test RMSE: {:.2f}'.format(test_rmse))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ymTlR6AAxKfh",
        "outputId": "6629008e-0f97-4519-a1b1-e97d4f96d3cd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 26ms/step - loss: 0.0474\n",
            "Test RMSE: 0.29\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv('/content/Unemployment Rate, S&P 500 Index, N sr.txt')\n",
        "\n",
        "# Split the dataset into input features and target variable\n",
        "X = df.drop('Unemployment Rate', axis=1)\n",
        "y = df['Unemployment Rate']\n",
        "\n",
        "# Normalize the input features using MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "X = scaler.fit_transform(X)\n",
        "\n",
        "# Convert the target variable to a numpy array\n",
        "y = np.array(y)\n",
        "\n",
        "# Print the preprocessed data\n",
        "print('Input features:\\n', X)\n",
        "print('Target variable:\\n', y)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UQD7rw5Wxt6S",
        "outputId": "5e443bb6-051d-43db-abe5-afc37126aa4e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input features:\n",
            " [[0.6961592  0.9139333  1.        ]\n",
            " [0.45608217 0.60343164 0.94986712]\n",
            " [0.65539745 0.86052922 0.98535182]\n",
            " [0.47737242 0.56422271 0.90662873]\n",
            " [0.59869477 0.60439636 0.88244236]\n",
            " [0.90414037 1.         0.83804561]\n",
            " [1.         0.99765711 0.88300936]\n",
            " [0.87685889 0.86624862 0.81502108]\n",
            " [0.59708998 0.7670204  0.70921051]\n",
            " [0.29292821 0.44425303 0.58740208]\n",
            " [0.04825078 0.         0.47837385]\n",
            " [0.         0.05478225 0.4074114 ]\n",
            " [0.4294426  0.42034179 0.44053069]\n",
            " [0.13362576 0.08999449 0.32642029]\n",
            " [0.29710067 0.38202867 0.37786807]\n",
            " [0.59730395 0.77687431 0.42006289]\n",
            " [0.59751792 0.71961136 0.4061626 ]\n",
            " [0.80303841 0.98959482 0.47538577]\n",
            " [0.57216219 0.70817255 0.34908305]\n",
            " [0.29335616 0.17344267 0.2285756 ]\n",
            " [0.48143789 0.32945149 0.24950605]\n",
            " [0.31635819 0.29720232 0.11486872]\n",
            " [0.08783567 0.01984564 0.        ]]\n",
            "Target variable:\n",
            " [5.5 5.7 5.9 6.1 6.3 6.5 6.7 6.9 7.1 7.3 7.5 7.7 7.9 8.1 8.3 8.5 8.7 8.9\n",
            " 9.1 9.3 9.5 9.7 9.9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "\n",
        "# Create a 3D scatter plot of the input features and target variable\n",
        "fig = plt.figure()\n",
        "ax = fig.add_subplot(111, projection='3d')\n",
        "ax.scatter(X[:, 0], X[:, 1], X[:, 2], c=y)\n",
        "ax.set_xlabel('S&P 500 Index')\n",
        "ax.set_ylabel('NASDAQ Index')\n",
        "ax.set_zlabel('Dow Jones Index')\n",
        "ax.set_title('Unemployment Rate vs Stock Market Indices')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 275
        },
        "id": "XNHiYYAHx0Da",
        "outputId": "f0dbd7a5-b2ce-4dac-e195-d8172a84ab3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv('/content/Unemployment Rate, S&P 500 Index, N sr.txt')\n",
        "\n",
        "# Split the dataset into input features and target variable\n",
        "X = df.drop('Unemployment Rate', axis=1)\n",
        "y = df['Unemployment Rate']\n",
        "\n",
        "# Normalize the input features using MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "X = scaler.fit_transform(X)\n",
        "\n",
        "# Split the dataset into training and testing sets\n",
        "split_ratio = 0.7\n",
        "split_index = int(len(X) * split_ratio)\n",
        "X_train, X_test = X[:split_index], X[split_index:]\n",
        "y_train, y_test = y[:split_index], y[split_index:]\n",
        "\n",
        "# Create a neural network model\n",
        "model = Sequential()\n",
        "model.add(Dense(8, input_dim=X.shape[1], activation='relu'))\n",
        "model.add(Dense(4, activation='relu'))\n",
        "model.add(Dense(1, activation='linear'))\n",
        "model.compile(loss='mean_squared_error', optimizer='adam')\n",
        "\n",
        "# Train the model\n",
        "model.fit(X_train, y_train, epochs=100, batch_size=2)\n",
        "\n",
        "# Evaluate the model on the testing set\n",
        "mse = model.evaluate(X_test, y_test)\n",
        "print('Mean Squared Error:', mse)\n",
        "\n",
        "# Make predictions on the testing set\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Compare the predictions with the actual values\n",
        "comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred.flatten()})\n",
        "print(comparison_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fId-qwvJyHVS",
        "outputId": "3c8c76cc-4ed6-453a-ca21-a79388850f9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "8/8 [==============================] - 1s 2ms/step - loss: 49.6905\n",
            "Epoch 2/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 49.5434\n",
            "Epoch 3/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 49.3444\n",
            "Epoch 4/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 49.1100\n",
            "Epoch 5/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 48.7327\n",
            "Epoch 6/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 48.1793\n",
            "Epoch 7/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 47.4881\n",
            "Epoch 8/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 46.7972\n",
            "Epoch 9/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 46.1094\n",
            "Epoch 10/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 45.4843\n",
            "Epoch 11/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 44.8546\n",
            "Epoch 12/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 44.2300\n",
            "Epoch 13/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 43.5896\n",
            "Epoch 14/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 42.9303\n",
            "Epoch 15/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 42.2477\n",
            "Epoch 16/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 41.5284\n",
            "Epoch 17/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 40.7920\n",
            "Epoch 18/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 40.0472\n",
            "Epoch 19/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 39.2343\n",
            "Epoch 20/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 38.4161\n",
            "Epoch 21/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 37.5626\n",
            "Epoch 22/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 36.6876\n",
            "Epoch 23/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 35.7959\n",
            "Epoch 24/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 34.8339\n",
            "Epoch 25/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 33.8824\n",
            "Epoch 26/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 32.8595\n",
            "Epoch 27/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 31.8403\n",
            "Epoch 28/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 30.8097\n",
            "Epoch 29/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 29.7051\n",
            "Epoch 30/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 28.6179\n",
            "Epoch 31/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 27.4797\n",
            "Epoch 32/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 26.3564\n",
            "Epoch 33/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 25.2044\n",
            "Epoch 34/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 24.0463\n",
            "Epoch 35/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 22.8941\n",
            "Epoch 36/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 21.7964\n",
            "Epoch 37/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 20.6236\n",
            "Epoch 38/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 19.5253\n",
            "Epoch 39/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 18.4112\n",
            "Epoch 40/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 17.3459\n",
            "Epoch 41/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 16.3387\n",
            "Epoch 42/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 15.3477\n",
            "Epoch 43/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 14.3977\n",
            "Epoch 44/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 13.4720\n",
            "Epoch 45/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 12.6523\n",
            "Epoch 46/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 11.8646\n",
            "Epoch 47/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 11.1497\n",
            "Epoch 48/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 10.4450\n",
            "Epoch 49/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 9.8264\n",
            "Epoch 50/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 9.2327\n",
            "Epoch 51/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 8.7666\n",
            "Epoch 52/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 8.3219\n",
            "Epoch 53/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 7.9026\n",
            "Epoch 54/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 7.5531\n",
            "Epoch 55/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 7.2985\n",
            "Epoch 56/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 6.9644\n",
            "Epoch 57/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 6.7685\n",
            "Epoch 58/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 6.5730\n",
            "Epoch 59/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 6.4349\n",
            "Epoch 60/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 6.2909\n",
            "Epoch 61/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 6.1685\n",
            "Epoch 62/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 6.0409\n",
            "Epoch 63/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.9792\n",
            "Epoch 64/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.8985\n",
            "Epoch 65/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.8431\n",
            "Epoch 66/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.7874\n",
            "Epoch 67/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.7458\n",
            "Epoch 68/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.7066\n",
            "Epoch 69/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.6717\n",
            "Epoch 70/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.6371\n",
            "Epoch 71/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.6137\n",
            "Epoch 72/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.5828\n",
            "Epoch 73/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.5575\n",
            "Epoch 74/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.5308\n",
            "Epoch 75/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.5193\n",
            "Epoch 76/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.4822\n",
            "Epoch 77/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.4653\n",
            "Epoch 78/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.4485\n",
            "Epoch 79/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.4239\n",
            "Epoch 80/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.4048\n",
            "Epoch 81/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.3772\n",
            "Epoch 82/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.3557\n",
            "Epoch 83/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.3561\n",
            "Epoch 84/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.3115\n",
            "Epoch 85/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.2987\n",
            "Epoch 86/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.2844\n",
            "Epoch 87/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.2604\n",
            "Epoch 88/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.2375\n",
            "Epoch 89/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.2126\n",
            "Epoch 90/100\n",
            "8/8 [==============================] - 0s 2ms/step - loss: 5.1979\n",
            "Epoch 91/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.1814\n",
            "Epoch 92/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.1651\n",
            "Epoch 93/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.1437\n",
            "Epoch 94/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.1182\n",
            "Epoch 95/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.1035\n",
            "Epoch 96/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.0805\n",
            "Epoch 97/100\n",
            "8/8 [==============================] - 0s 4ms/step - loss: 5.0608\n",
            "Epoch 98/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.0407\n",
            "Epoch 99/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.0173\n",
            "Epoch 100/100\n",
            "8/8 [==============================] - 0s 3ms/step - loss: 5.0037\n",
            "1/1 [==============================] - 0s 107ms/step - loss: 20.9926\n",
            "Mean Squared Error: 20.992584228515625\n",
            "1/1 [==============================] - 0s 98ms/step\n",
            "    Actual  Predicted\n",
            "16     8.7   5.994246\n",
            "17     8.9   6.829297\n",
            "18     9.1   5.794174\n",
            "19     9.3   4.242224\n",
            "20     9.5   4.730773\n",
            "21     9.7   4.173540\n",
            "22     9.9   3.151496\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv('/content/Unemployment Rate, S&P 500 Index, N sr.txt')\n",
        "\n",
        "# Split the dataset into input features and target variable\n",
        "X = df.drop('Unemployment Rate', axis=1)\n",
        "y = df['Unemployment Rate']\n",
        "\n",
        "# Normalize the input features using MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "X = scaler.fit_transform(X)\n",
        "\n",
        "# Create a neural network model\n",
        "model = Sequential()\n",
        "model.add(Dense(8, input_dim=X.shape[1], activation='relu'))\n",
        "model.add(Dense(4, activation='relu'))\n",
        "model.add(Dense(1, activation='linear'))\n",
        "model.compile(loss='mean_squared_error', optimizer='adam')\n",
        "\n",
        "# Train the model on the entire dataset\n",
        "model.fit(X, y, epochs=100, batch_size=2)\n",
        "\n",
        "# Define the stock values\n",
        "snp = np.linspace(1000, 5000, 100)\n",
        "nasdaq = np.linspace(5000, 15000, 100)\n",
        "dow = np.linspace(10000, 40000, 100)\n",
        "\n",
        "# Normalize the input features using the same scaler used for the dataset\n",
        "input_data = scaler.transform(np.column_stack((snp, nasdaq, dow)))\n",
        "\n",
        "# Make predictions using the trained model\n",
        "unemployment_rate_pred = model.predict(input_data)\n",
        "\n",
        "# Plot the results\n",
        "fig, ax = plt.subplots()\n",
        "ax.plot(snp, unemployment_rate_pred, label='S&P 500')\n",
        "ax.plot(nasdaq, unemployment_rate_pred, label='NASDAQ')\n",
        "ax.plot(dow, unemployment_rate_pred, label='Dow Jones')\n",
        "ax.set_xlabel('Stock Market Index Value')\n",
        "ax.set_ylabel('Unemployment Rate')\n",
        "ax.set_title('Predicted Unemployment Rate vs Stock Market Index Value')\n",
        "ax.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "T6nnVbsk0fZi",
        "outputId": "e90a05fa-b2b7-4f03-ff92-94f0025f5444"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "12/12 [==============================] - 1s 2ms/step - loss: 60.9699\n",
            "Epoch 2/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 60.2405\n",
            "Epoch 3/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 59.3292\n",
            "Epoch 4/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 58.2924\n",
            "Epoch 5/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 57.2936\n",
            "Epoch 6/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 56.2369\n",
            "Epoch 7/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 55.1681\n",
            "Epoch 8/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 54.0654\n",
            "Epoch 9/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 52.8584\n",
            "Epoch 10/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 51.6143\n",
            "Epoch 11/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 50.3212\n",
            "Epoch 12/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 48.9966\n",
            "Epoch 13/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 47.6014\n",
            "Epoch 14/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 46.1240\n",
            "Epoch 15/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 44.5688\n",
            "Epoch 16/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 42.9539\n",
            "Epoch 17/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 41.2595\n",
            "Epoch 18/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 39.4502\n",
            "Epoch 19/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 37.5198\n",
            "Epoch 20/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 35.4848\n",
            "Epoch 21/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 33.4297\n",
            "Epoch 22/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 31.4331\n",
            "Epoch 23/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 29.4178\n",
            "Epoch 24/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 27.4807\n",
            "Epoch 25/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 25.6031\n",
            "Epoch 26/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 23.7787\n",
            "Epoch 27/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 22.1246\n",
            "Epoch 28/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 20.4690\n",
            "Epoch 29/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 18.9684\n",
            "Epoch 30/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 17.5777\n",
            "Epoch 31/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 16.3940\n",
            "Epoch 32/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 15.2102\n",
            "Epoch 33/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 14.1814\n",
            "Epoch 34/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 13.3728\n",
            "Epoch 35/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 12.5304\n",
            "Epoch 36/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 11.9378\n",
            "Epoch 37/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 11.4417\n",
            "Epoch 38/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 10.9598\n",
            "Epoch 39/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 10.6614\n",
            "Epoch 40/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 10.2806\n",
            "Epoch 41/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 10.0847\n",
            "Epoch 42/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 9.8392\n",
            "Epoch 43/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 9.7204\n",
            "Epoch 44/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 9.5373\n",
            "Epoch 45/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 9.3833\n",
            "Epoch 46/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 9.2613\n",
            "Epoch 47/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 9.1712\n",
            "Epoch 48/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 9.0991\n",
            "Epoch 49/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 9.0032\n",
            "Epoch 50/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 8.9475\n",
            "Epoch 51/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.8752\n",
            "Epoch 52/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.8233\n",
            "Epoch 53/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.7529\n",
            "Epoch 54/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.6916\n",
            "Epoch 55/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.6290\n",
            "Epoch 56/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.5693\n",
            "Epoch 57/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.5037\n",
            "Epoch 58/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.4461\n",
            "Epoch 59/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.3807\n",
            "Epoch 60/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.3391\n",
            "Epoch 61/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.2664\n",
            "Epoch 62/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.2106\n",
            "Epoch 63/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.1633\n",
            "Epoch 64/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.0741\n",
            "Epoch 65/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.0270\n",
            "Epoch 66/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.9812\n",
            "Epoch 67/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 7.9110\n",
            "Epoch 68/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.8730\n",
            "Epoch 69/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.8024\n",
            "Epoch 70/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.7489\n",
            "Epoch 71/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 7.6959\n",
            "Epoch 72/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.6460\n",
            "Epoch 73/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.5866\n",
            "Epoch 74/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.5604\n",
            "Epoch 75/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.4783\n",
            "Epoch 76/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.4248\n",
            "Epoch 77/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.3664\n",
            "Epoch 78/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.3208\n",
            "Epoch 79/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.2558\n",
            "Epoch 80/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.2043\n",
            "Epoch 81/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.1601\n",
            "Epoch 82/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 7.0987\n",
            "Epoch 83/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.0590\n",
            "Epoch 84/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.0359\n",
            "Epoch 85/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.9480\n",
            "Epoch 86/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.8916\n",
            "Epoch 87/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.8647\n",
            "Epoch 88/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.7950\n",
            "Epoch 89/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.7644\n",
            "Epoch 90/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.7003\n",
            "Epoch 91/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.6555\n",
            "Epoch 92/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.6227\n",
            "Epoch 93/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.5455\n",
            "Epoch 94/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.4968\n",
            "Epoch 95/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.4537\n",
            "Epoch 96/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.4073\n",
            "Epoch 97/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.3538\n",
            "Epoch 98/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.2954\n",
            "Epoch 99/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 6.2705\n",
            "Epoch 100/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 6.2071\n",
            "4/4 [==============================] - 0s 3ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZAAAAEWCAYAAABIVsEJAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAABTqElEQVR4nO2dd3hU1daH35UEktAJoQdJqNI7YqEpVb32a700C0qRK+LFjnAVFRuC+IF0UESaBb2idAFBeiD0loQEA6QAIQkhbX9/nJMwhCQMSWbOTGa/z5Mnp+79m33KOrutJUopNBqNRqO5UbysFqDRaDQa90QbEI1Go9EUCm1ANBqNRlMotAHRaDQaTaHQBkSj0Wg0hUIbEI1Go9EUCo8zICIyV0TeM5c7i8hhJ+WrRKSBM/JyJCKyXkSetVqHxhpc4fqLSLD5PPlYqSM3rqjL0dfLJQ2IiESIyCURSRKRM+ZLv1xx56OU2qiUamyHnoEisqm487dJP0JEejgzT09BRLqJSPR1jpkrImnm/ZYgIqtE5GY703eJl4aINBORlab+8yKyU0TuNvddtwwcpCnCLNfAXNt3m2UW7GQ9171WIjJWRL5xpq6CEJHXRGRDHtsDzbJtboWubFzSgJj8QylVDmgLtAfeyn2A1Q+tpkTxkXm/1QZOAbMs1nOj/AysAmoA1YARQKKligzCgSeyV0SkBVCmsIl54DP/DXCbiITk2v44EKaU2meBphxc2YAAoJQ6BawAmkNOU9AwETkKHDW33SsioeaX12YRaZl9voi0EZFdInJRRBYBfjb7rvoyE5E6IvK9iMSKSLyITBGRJsA04FbzC/W8eayviHwiIifNWtI0EfG3Ses/IhIjIn+LyNNFKQObL6cBZn5xIvKmzX4v80vluKl7sYgE5Dp3kIhEicg5EXlBRDqIyF6zzKbYpDVQRP40f/sFETkkInflo8tLRN4SkUgROSsi80WkornvfyLyYq7j94rIg+ayEpGhInLUvDbvikh98/olmr+htM25BV3jCBF5xUz/gogsEhE/ESmLce/UMq9dkojUKqislVKXgMVAa5v07zG/mhPNMhxrc0r21+F5M/1bzXOeFpGDZnn/LiJ18ynDFSIyPNe2PSLykBhMNMs2UUTCJI8vTjG+8EOAGUqpNPPvT6XUpvzKwLx/Pzfvz7/NZV+bNO83yzvRvK/65JFvTbPM/1NAkX4N9LdZHwDMz5VOvuVrc/8+IyIngbV56HjYvAeaF/QskM+1Kggz7xfM+/S8iHwpImLu8xbjHRAnIieAe3KdW1FEZonxHjglIu+Z55Q2y/ZFm3T+FJExufNXSkWbv7lfrl39gfkiUllEfhHjnXXOXA7K57dcVbuSXDWy/PQWWEBKKZf7AyKAHuZyHWA/8K65rjC+tAIAf6ANcBa4BfDGuEEjAF+gNBAJjARKAY8A6cB7ZlrdgGhz2RvYA0wEymIYmjvMfQOBTbk0TgSWmzrKY3wBfmDu6wOcwTB6ZYFvTd0Nrvd7bbbl5AkEm+fPMH9zK+Ay0MTc/2/gLyDI/N1fAQtznTvN/E29gFTgR4wv1dpm+XW1yTfDpsweAy4AAeb+9cCz5vLTwDGgHlAO+B742tz3KLDV5ve0AuKB0jbX8SegAtDM/D1rzLQqAgeAAeax+V5jm/LbBtQyr8dB4IXc17iA+20uV+6JshgvvT02+7sBLTA+uFqa1/aBXOXrY3P8/Wa5NAF8MGrPm/PJuz/wp816U+C8eR17AzuBSoCY6dXMIw3B+Jj6BXgAqJ5r/zVlAPwX456pBlQFNnPlGetoXvOe5m+uDdxse/0xDNYRYPD1nmPgsKndG4gG6pplFnwD5TvfvDb+tmUODDLLusENPAs+BWgeC3xjs67Mcq0E3ATEAn3MfS8AhzDeUQHAOtv0gR/M/Mua5bwNeN7c1xw4Z5bLm6Zm73w0PQUctVlvDKSZ160K8DBGra48sAT40ebY9Vx5XnP/tqvKoyC9+ZaXIw1BYf/MGy8J40GKBP4P8Le5oHfaHDsV88a32XYY6Ap0Af4GxGbfZvI2ILeaN8c1Nxe5DAjGA5sM1LfZdisQbi7PBj602deI4jEgQTb7twGPm8sHgbts9tXEMJQ+NufWttkfDzxms74MeMkm39xltg3ol8cNuQYYmuvGzs7XD+MBaWju+wT4v1wP5u026zuBV23WPwU+v941tim/f9ns+wiYlvsaF3C/zcUwqueBLIxml5YFHP85MDGvh9DctgJ4xmbdC0gB6uaRVnnzXqprro8HZpvLd2K8pDsBXtf5DUHAFOC4+Rs22JT9NWVgHne3zXpvIMJc/ir79+WRz3rgM7PMn7DjOe6BYUA/wPiwWmXeHzkGxM7yrWezP3vbKxgfGrbPhT3Pwo0akDts1hcDr5nLazE/VMz1XlwxbNUxPor8bfY/AayzWR+FcR/nPCf5aCqD0Rx5m8098lM+x7YGzuW6Xtc1IPbozevPlZuwHlBKVVJK1VVKDVVG00I2UTbLdYFRZvXyvBhNTHUwvkZrAaeUWRomkfnkVweIVEpl2KGtKsZF3WmT52/mdsx8bTXml2c2GRhf+7aUwrjxbTlts5yC8dUPRhn8YKPlIJCJcVNkc8Zm+VIe67aDFPIqs7yafmpx9W+LxLwZlVKpwCLgXyLihXEzfp3rfHs1FXSNs8mvbOzlE6VUJYyH6hKGMQRARG4RkXVmM8EFjC/PwDxTuaJ3ko3WBIyPjtq5D1RKXQT+h9GmDUY5LTD3rcUwCl8CZ0VkuohUyCtDpVS0Umq4Uqq+mX8yuZqKcpHXtcsuzzoYBiY/nsLoJ1pawDG2fA08ifFxco0mO8s3Kvd5wH+AL5XRzJONPc/CjZLfvVXQc14X4xmOsdHyFcaXfTbzzON+VUodzS9zpVQKRs2iv9l89hRmOYpIGRH5Soxm5ESMD4dK1216uhZ79F6DKxuQgrB9uUUB401jk/1XRim1EIgBame3WZrclE+aUcBNkncnncq1Hofxkmlmk2dFZXTCYuZbx448szmJ8eKyJYTrG55sooC+ucrATxn9R4UhrzL7O4/j/sa48WyPy+CKIZiHcbPfBaQopbYUUk9B1/h65L52BR+s1EmMZpBJcqVP61uM5so6SqmKGM2B2eWTV/pRGFV/W73+SqnN+WS7EHjCbJP3w2gKydYzWSnVDqNpqxHGS/N6vyEKw+hk95fkpTGva5d9jaOA+gVkMRbjGfjWnheVUioSo1Z3N0YzZ24KKt+cZPI4rxfwlog8bLOtoGfhhu4FOyjoOY/C+KIPtNFRQSnVzOaY/8NoHustIndcJ695GM3CPbnSZA5GLaYxcItSqgJGqwtcW35gfFTYDmCocYN6r8FdDYgtM4AXzK8YEZGyZqdceWALxgtthIiUEpGHMNp382Ibxg3xoZmGn4jcbu47AwSJ2amrlMoy850oItUARKS2iPQ2j18MDBSRpiJSBnjnOr9hEfCSiNxs/ob2GP0L39lZBtOA8WJ21IpIVRG5385z86IaV8rsnxjttL/mcdxCYKSIhIgxzPp9YFF2Lc40GFkYzVG5ax83QkHX+HqcAaqI2blvD0qpVRgv08HmpvJAglIqVUQ6YnxNZxOL8Rvr2WybBrwuIs0gp3PynwVk+SvGy/y/GOWXZZ7XwfzNpTAe/lQzr6swO1LHiUgDMTqRAzHun78KKIOFGC/fqubxYzBG/IAxAm2QiNxlpldbrh7WnA78E6OtfL5Zw7wez2A0PSfnsa+g8i2I/RjNYl+KyH3mtoKehbyuVVFYjPGcBIlIZeC17B1KqRhgJfCpiFQwy7G+iHQ1dfUD2mHUykYA86TgqQobMZpYpwPfKaXSzO3lMT5mz4sxWKCgd00o0EVEbjLvhdft1Zsfbm9AlFI7gOcwqvrnMDrUBpr70oCHzPUEjA7hvL6AUEplAv8AGmDUCKLN48Fo69wPnBaROHPbq2Zef5lVx9WYzR5KqRUY7bhrzWOuGTmSixnAHIyvigsY1dM3lVK/2VMGwCSML7iVInIR48Vxi53n5sVWoCHGV+Z44BGlVHwex83GMAwbML4wU4EXcx0zH6ODtNBj6wu6xnacewjjZXnCrJoXOArLho+B0WKMTBoK/Ncs2zEYL47s9FMwyuhPM/1OSqkfgAnAd+a9sQ/oW4DGyxj3ZQ+Mr/FsKmDcG+cwaqPxpq7cpGHUYFdjtJXvw/iaHFhAGbwH7AD2AmHALnMbSqltGJ3TEzHuxz+4urZi+2xVB2Zfz4gopY6b1zEv8i3f66GU2gPcC8wQkb4U8Czkda3szScfZgC/Ywy+2cW175b+GAN5DmBcw6VATRG5CeP90F8plaSU+hbjWkws4HcqjGepLlc3A36OMbAgDuO35vvOMD+MFmFc850YtZ/r6s0vPTA7SjWabERkIEan2/Wq1Pam1x9jpE6xpKfRaFwHt6+BaFwXs/luKEa1W6PRlDC0AdE4BLM/KBaj/f3b6xyu0WjcEN2EpdFoNJpCoWsgGo1GoykUbu2YLDAwUAUHB1stQ6PRaNyKnTt3ximlql7/yIJxawMSHBzMjh35jQzUaDQaTV6IiL2TlAtEN2FpNBqNplBoA6LRaDSaQqENiEaj0WgKhTYgGo1GoykU2oBoNBqNplBoA6LRaDSaQqENiEaj0WgKhTYgTub0hVQ+/v0QEXF5hUXQ5EtaCvz2OsQds1qJRmMpGVkZfLL9E04nn77+wQ5GGxAnc/B0Il+uO0588mWrpbgXR36Dv/4PLuYVGFGj8QzSMtMYtX4U8w7MY0P0BqvluPdMdHck0qx51K1S1mIlbkbYEihfE+refv1jNZoSSEp6Ci+te4ktMVt4reNrPNr4UaslaQPibCLiUyhb2psqZUtbLcV9SEmAo6ug42Dwum4Ibo2mxJGYlsiw1cPYG7eXd29/lwcaPGC1JEAbEKcTGZ9McGBZRPKKea/Jk4PLISsdWhYUVlyjKZkkpCbw/KrnOXb+GB93+Zhewb2slpSDNiBOJiI+hSY1y1stw70IWwpVGkDN1lYr0Wicyunk0wxeNZiYpBi+uPML7qjtWpGhdSe6E8nIzCIqIYVg3f9hPxdOQcQmaPEo6FqbxoOISoxi4G8DOZtylqk9prqc8QBdA3Eqf59PJSNLaQNyI+xbBiho8YjVSjQap3H8/HGeW/kcaVlpzOo1i2aBzayWlCe6BuJEIuKNEVg3VSljsRI3ImwJ1GoLVepbrUSjcQoH4g8w8LeBKBRzes9xWeMB2oA4lUjTgIQE6hqIXcQehtN7oaX1wxU1Gmew++xunvn9Gcr4lGFen3k0rNzQakkFog2IE4mIT8GvlBfVyvtaLcU9CFsC4gXNHrRaiUbjcDaf2szglYMJ9A9kXt953FThJqslXRdtQJxIZHwywVX0EF67UMowICFdoXwNq9VoNA5lTeQahq8dTt0KdZnbZy41yrrHPa8NiBOJiE+hru7/sI/oHXAuQneea0o8y48vZ9Qfo2hSpQmzes+iin8VqyXZjTYgTiIzS3EyPoVg3f9hH2FLwNsXmvzDaiUajcNYeGghb256k/Y12jOj5wwq+la0WtINoYfxOomYC5dIy8yiboA2INclMwP2fw+NeoGfez1QGo29zAybyaRdk+hWpxufdP0EX2/36xvVBsRJRManABAcqJuwrkv4H5Aca0we1GhKGEopJu2axKx9s+gb0pfxd4ynlFcpq2UVCm1AnET2HBDthdcOwpaCb0Vo6Do+fzSa4iBLZfHB1g/47vB3PNLoEd665S283dhBqDYgTiIyPoXSPl7UrOBntRTXJv0SHPwZmt4PpXRZaUoOGVkZvLP5HZYfX86ApgMY1X6U24/IdFgnuojMFpGzIrLPZluAiKwSkaPm/8rmdhGRySJyTET2ikhbR+myioi4ZOoGlMHLy71vGIdz5DdIu6g972pKFGmZafznj/+w/PhyhrceXiKMBzh2FNZcoE+uba8Ba5RSDYE15jpAX6Ch+TcYmOpAXZYQqYfw2kfYUihXA4I7W61EoykWLmVcYsTaEaw+uZrRHUbzfKvnS4TxAAcaEKXUBiAh1+b7gXnm8jzgAZvt85XBX0AlEanpKG3OJitLEZmQrJ0oXo9L5+DoSmj+sA4cpSkRJKUl8cKqF9gSs4X/3vZf+jXtZ7WkYsXZ80CqK6VizOXTQHVzuTYQZXNctLntGkRksIjsEJEdsbGxjlNajJy5mEpqehZ19RyQgjmwHDLT9ORBTYngXOo5nln5DHtj9zKhywQebFjyXPJYNpFQKaUAVYjzpiul2iul2letWtUByoqfiDhjCG+IroEUTNgSI3BUrTZWK9FoisTZlLMM+m0Qx88fZ9Kdk+gTnLs1v2TgbANyJrtpyvx/1tx+Cqhjc1yQua1EEJkzhFf3geRL4t9m4Kh/6sBRGrcm+mI0A1YMICY5hqk9ptIlqIvVkhyGsw3IcmCAuTwA+Mlme39zNFYn4IJNU5fbExGfQilvoVYlf6uluC45gaP06CuN+3LiwgkG/DaAxLREZvSaQYcaHayW5FAcNg9ERBYC3YBAEYkG3gE+BBaLyDNAJJA91fhX4G7gGJACDHKULiuIjE+mTuUyeOshvPmjA0dp3JxDCYd4ftXzCMKcPnNoVLmR1ZIcjsMMiFLqiXx23ZXHsQoY5igtVhOhnSgWTOwRiNkDvd+3WolGUyhCz4YydPVQypUux4xeM6hboa7VkpyC9sbrYJRSRMYn6/6Pgti3FBBj+K5G42Zs+XsLg1cNJsA/gHl95nmM8QBtQBxObNJlUtIy9RyQ/FAK9i6GkC46cJTG7Vh7ci3D1gwjqHwQc/vMpWa5EjN9zS60AXEwV7zwagOSJ6d2wblwHfdc43b8cuIXXl7/Mk0CmjCn9xwC/QOtluR0tAFxMOFx5hDeAN2ElSfZgaNuvtdqJRqN3Sw+vJg3Nr5B2+ptmd5rutsFgioutDdeBxMZn4yPlxBUWQ/hvYbMDGP4bqNe4F/JajUajV3M2TeHz3Z+RpegLnza9VP8fDzXa7Q2IA4mIj6F2pX98fHWlb1riNgAyWf13A+NW6CU4ovdXzAjbAZ9gvvwfuf33TYQVHGhDYiDiYzXThTzZe8S8K0ADXtbrUSjKZAslcVH2z9iwcEFPNzwYd7u9LZbB4IqLrQBcSBKKSLjUmh7U2WrpbgeOnCUxk3IzMpk7Jax/HjsR/o17cd/2v+nxLhjLyragDiQhOQ0Ll7O0DWQvDjyuxE4Snve1bgw6ZnpvLbxNVZGrmRIqyEMaTVEGw8btAFxIBE5Q3j1CKxrCFtiBI4KKbmO5jTuTWpGKi+vf5mNpzbySvtXGNBswPVP8jC0AXEgV7zw6hrIVWQHjurwrA4cpXFJktKSeHHti+w8s5Mxt47hn430QI+80AbEgUTEJeMlUKeyroFcxcGfzcBR+qHUuB7nU88zZPUQDiUc4sPOH3J3vbutluSyaAPiQCLiU6hVyZ/SPnoI71WELYGAejpwlMbliE2JZfCqwZxMPMnE7hPpVqeb1ZJcGv1mcyCR8cmEaBcmV5MYA+EbocWjOnCUxqX4O+lvBv42kFNJp/iyx5faeNiBNiAOJCI+hZu0C5Or2f89RuAoPfpK4zqEXwin/4r+nLt8juk9p9OpZierJbkFugnLQZxPSePCpXRdA8nN3sVG01VgQ6uVaDQAHE44zOBVgwGY3Xs2NwfcbLEi90HXQBxE9hBeXQOxIe4YxITqznONyxB6NpRBvw+ilFcp5vaZq43HDaINiIPIHsKrayA2hC0GBJo9ZLUSjYa/Yv5i8KrBVPatzPy+8wmpGGK1JLdDGxAHERGXggjU0TUQA6WM0VchXaCCZwXd0bge66PWM2z1MGqXq83cPnOpVa6W1ZLcEm1AHEREfDI1K/jhV0pPlAPg712QcEJ3nmssZ0X4CkauG0nDyg2Z03sOVctUtVqS26INiIOIiE/WUQhtCVsK3qWhyX1WK9F4MMuOLOPVDa/SulprZvaaSSW/SlZLcmu0AXEQkfEp1K2im68AyMo0Akc11IGjNNYxb/88xm4Zy+21b2dqj6mUK13Oaklujx7G6wASU9NJSE7TXnizCd8ASWd03HONJSilmLpnKlP3TKVX3V582PlDSnl7diCo4kIbEAcQGWcM4dU1EJOwpVC6vFED0WiciFKKT3Z8wvwD83mgwQOMvXWsDgRVjFy3CUtEqovILBFZYa43FZFnHC/NfYkwh/DqPhAgPRUOLoem90EpHRde4zwyszIZt2Uc8w/M56kmTzHutnHaeBQz9vSBzAV+B7LHuR0BXnKQnhJB9hwQPYkQOPo7XE7Uo680TiU9K53XN77OsqPLGNxyMK92eBUv0V2+xY09JRqolFoMZAEopTKATIeqcnMi4lOoXsGXMqV1CyFhS6BsNQjparUSjYeQmpHKyHUjWRGxgpHtRvJimxd1FEEHYY8BSRaRKoACEJFOwIWiZCoiI0Vkv4jsE5GFIuInIiEislVEjonIIhEpXZQ8rCQyPlkHkQJIvQBHVkLzh3XgKI1TSE5PZtiaYWyI3sDbnd7m6eZPWy2pRGOPAXkZWA7UF5E/gfnAiMJmKCK1zfPbK6WaA97A48AEYKJSqgFwDnDbfpbwuBRCtAGBA8sh87L2faVxChcuX2DwysHsPLOT9zu/z6ON9ag/R2NPG8t+oCvQGBDgMEWfP+ID+ItIOlAGiAHuBJ40988DxgJTi5iP00m6nEFc0mXq6jjoVwJH1W5rtRJNCSfuUhzPr3qe8AvhfNbtM+686U6rJXkE9hiCLUqpDKXUfqXUPqVUOrClsBkqpU4BnwAnMQzHBWAncN7sXwGIBmrndb6IDBaRHSKyIzY2trAyHEZOHPQAD6+BJMYY8z9a/FMHjtI4lJikGAb+NpCoi1FMuWuKNh5OJN8aiIjUwHiJ+4tIG4zaB0AFjFpDoRCRysD9QAhwHlgC9LH3fKXUdGA6QPv27VVhdTiKSNONe7Cn10ByAkfp5iuN44hMjOTZlc+SnJbM9J7TaV2ttdWSPIqCmrB6AwOBIOAzm+0XgTeKkGcPIFwpFQsgIt8DtwOVRMTHrIUEAaeKkIdlZM8B8fhO9LAlULOVDhylcRiHEw7z/KrnyVJZzOo9iyZVmlgtyePI14AopeYB80TkYaXUsmLM8yTQSUTKAJeAu4AdwDrgEeA7YADwUzHm6TQi41IILOdLOV8PHsIbdwz+3g29xlutRFNC2Ru7lyGrh+Dn48fsXrOpV7Ge1ZI8kuu+5ZRSy0TkHqAZ4Gez/b+FyVAptVVElgK7gAxgN0aT1P+A70TkPXPbrMKkbzUR8ckEe7oLk7AlgEBzHThKU/xsP72d4WuGE+AXwMzeM6ldLs/uUo0TuK4BEZFpGH0e3YGZGLWEbUXJVCn1DvBOrs0ngI5FSdcViIxP4Y6GgVbLsI7swFHBd0AFHaRHU7xsiN7Ay+tfJqhcENN7TadamWpWS/Jo7BmFdZtSqj9wTik1DrgVaORYWe7JpbRMTiemUteTXZj8vRsSjuvOc02x83vE7/x73b+pX6k+c/rM0cbDBbDHgFwy/6eISC0gHdAxSfMgMkE7UcwJHNVUB47SFB8/HP2B0RtG0zKwJTN7zaSyX2WrJWmwbyLhLyJSCfgYo99CYTRlaXIRYbpx99g4IFcFjtIPuKZ4+ObAN0zYPoHba93OxO4T8ffRXp1dBXs60d81F5eJyC8YHekZBZziseR44fXUTvSIjZB0Wnve1RQLSim+2vsVX4Z+SY+bejChywRKe7uti7wSSYFNWCJSW0Ta2zg2rAi8Chx1uDI3JCI+hYCypano76HRzsKWGIGjGtk9L1SjyROlFBN3TuTL0C+5r/59fNz1Y208XJB8DYiIvASEAl8Af4nIs8BBwB9o5wxx7kZkfLLnxgBJT4UDP0OTf+jAUZoikZmVybt/vcuc/XN4rPFjvHv7u/h4efC8KhemoKsyGGislEoQkZswAkndrpTa6Rxp7kdkfAodQwKslmENR1fC5QvQUo++0hSe9Kx03tr0Fr+G/8qzLZ5lRJsROpaHC1OQAUlVSiUAKKVOishhbTzyJzU9k78vXPLcOOjZgaOCu1itROOmXM68zCt/vML6qPX8u+2/ebbFs1ZL0lyHggxIkIhMtlmvabuulCp0TJCSSFRCCkp56Ais1Atw5HdoPwi8dVOD5sZJSU9hxLoRbI3Zyhu3vMETNz9htSSNHRT0tP8n17qufRRAhOmF1yNHYB38WQeO0hSaxLREhq4eSlhcGOPvGM999fUcInfhes4UNXaSPYTXIyMRhi2BysFQW4+t0NwY8ZfieX7V8xy/cJxPu35Kj7o9rJakuQGKGllQYxIZn0IFPx8qlfGwIbwXT+vAUZpCcTr5NAN/G0hkYiRT7pyijYcbohusi4mI+GSCA8t63oiRfd+DytLNV5obIioximdXPktiWiJf9fyKttV12GN35Lo1EBG53Z5tno7hxt1Dm69qtISqja1WonETjp07xoDfBpCSkcLM3jO18XBj7GnC+sLObR5LWkYWp8554BDe+OPw9y5d+9DYzf64/Qz8fSAAc3rPoVmVZtYK0hSJgmKi3wrcBlQVkZdtdlUAvB0tzJ2IPpdClicO4c0OHKV9X2nsYOeZnQxbM4xKvpWY0WsGdcrXsVqSpogU1AdSGihnHlPeZnsiRlApjUl2HPTgQA+qgejAUZobYNOpTby07iVqlavFjJ4zqF62utWSNMVAQcN4/wD+EJG5SqlIJ2pyOzzSjXtMKMQfg9v0fFJNwayMWMmrG1+lYaWGTOs5jQA/D3X3UwKxZxSWr4hMB4Jtj1dK3ekoUe5GZHwy5Xx9CCjrQd5C9y4Br1I6cJSmQH489iPvbH6HVlVbMeWuKVQoXcFqSZpixB4DsgSYhhFEKtOxctyTiPgU6lYp4zlDeLMDRzXqrQNHafJlwcEFfLjtQ26teSufd/+cMqU8qInXQ7DHgGQopaY6XIkbExmfTLPaFa2W4TwiNunAUZp8UUoxM2wmk3dP5s46d+pYHiUYe4bx/iwiQ0WkpogEZP85XJmbkJGZRfS5S9T1pDggYUugdDlo2NtqJRoXQynFxF0Tmbx7MvfUu4dPun2ijUcJxp4ayADzv61zRQXUK3457sep85fIyFIEB3pIB3rGZTiw3AgcVdqDjKbmumSpLN7f+j6LDi/i0UaP8manN/ES7S2pJGNPTPQQZwhxV7K98HpMDSQ7cFRz3XyluUJGVgZv//k2v5z4hUHNBzGy7UjP6RP0YOxxZVJGRN4yR2IhIg1F5F7HS3MPcrzwekoNJGwJlK0K9bpZrUTjIqRlpjFq/Sh+OfELI9qM4OV2L2vj4SHYU7+cA6RhzEoHOAW85zBFbkZ4XDL+pbypWt7XaimOJzURDv8GzR7UgaM0gBEIavia4ayNWstrHV/juZbPWS1J40TsMSD1lVIfAekASqkUQH9emJz0pCG8OYGjHrVaicYFuJh2kRdWv8DW01t59/Z3earJU1ZL0jgZewxImoj4Y3ScIyL1gctFyVREKonIUhE5JCIHReRWc3TXKhE5av53iwkGHuWFNztwVFB7q5VoLCYhNYFnfn+GsLgwPu7yMQ80eMBqSRoLsMeAvAP8BtQRkQXAGmB0EfOdBPymlLoZaAUcBF4D1iilGpp5vFbEPBxOZpYiKuGSZ4zAungGwv/QgaM0nEk+w6DfBnHiwgkmd59Mr+BeVkvSWIQ9o7BWicguoBNG09W/lVJxhc1QRCoCXYCBZvppGLWc+4Fu5mHzgPXAq4XNxxn8ff4SaZlZnuHGfb8OHKWBqItRPLfyOc5fPs/UHlPpUKOD1ZI0FmLvIO3aGC7cSwNdROShIuQZAsQCc0Rkt4jMFJGyQHWlVIx5zGkgT3edIjJYRHaIyI7Y2NgiyCg6kfEe5EQxbAnUaKEDR3kwx88fZ+CKgSSlJzGz10xtPDR2DeOdDcwGHgb+Yf4VZRivD9AWmKqUagMkk6u5SimlMPtccqOUmq6Uaq+Ual+1atUiyCg6HuPGPf44nNqpO889mAPxBxj02yCyyGJO7zk0D2xutSSNC2DPWMxOSqmmxZhnNBCtlNpqri/FMCBnRKSmUipGRGoCZ4sxT4cQGZ+Mr48X1cv7WS3FsexbBgg0L0rFU+Ou7Dqzi2FrhlG+dHlm9prJTRVuslqSxkWwpwlri4gUmwFRSp0GokQkuy3kLuAAsJwrblMGAD8VV56OIjzOGMLr5VWCO5WVgr2Loe7tUDHIajUaJ7P51GaeX/U8gf6BzO87XxsPzVXYUwOZj2FETmMM3xWMVqaWRcj3RWCBiJQGTgCDMIzZYhF5BogEXL69JDI+mbolvf8jZg/EH4Vbh1mtRONk1kSu4T8b/kO9ivX4qudXVPGvYrUkjYthjwGZBfQDwoCs4shUKRUK5DWZ4K7iSN8ZZGUpTiak0K2xtf0wDicsO3DU/VYr0TiRn4//zNt/vk3zwOZ8edeXVPT1oHAFGruxx4DEKqWWO1yJm3HmYiqXM7JKdg0kO3BUgx5QRnvw9xS+O/Qd47eO55aatzC5+2QdCEqTL/YYkN0i8i3wMzYz0JVS3ztMlRsQHucBThQj/4SLMdB7vNVKNE5iVtgsPt/1Od2CuvFJt0/w9fYAH2+aQmOPAfHHMBy2000V4NEGJHsOyE0l2Y17duCoRn2tVqJxMEopvtj9BTPCZtA3pC/j7xhPKa9SVsvSuDj2GJBXlFLxDlfiZkTEJ1Pa24talfytluIYMi7DgZ/g5nt14KgSTpbK4sNtH7Lw0EIebvgwb3d6G28vb6tladwAewzIXyISiuHWfYU5yc/jiYxLoU6AP94ldQjv0VWQegFaatclJZmMrAze2fwOy48vZ0DTAYxqP8ozPEtrigV75oE0AqZjjMQ6KiLvi0gjx8pyfUq8F96wxVAmEEK6Wa1E4yDSM9MZvWE0y48vZ2jrodp4aG6Y6xoQZbBKKfUE8BzGJL9tIvKHiNzqcIUuiFKKiJI8ByQ7cFTzh3TgqBLKpYxLvLjuRVZFrmJ0h9EMaTVEGw/NDXPdt4OIVAH+hVEDOYMxCXA50BpYguEc0aM4e/Eyqekl2AvvoV+MwFE67nmJJCktiWFrhrH77G7G3TaOhxpqFzWawmHP5+UW4GvgAaVUtM32HSIyzTGyXJuIuGwniiW0BhK2BCrVhTodrVaiKWbOp57n+dXPcyThCB91+Yg+IX2slqRxY+wxII2VUkpEyolIOaVUUvYOpdQEB2pzWSITst24l8AaSNJZOLEe7hipA0eVMM6mnGXwysFEXYxi0p2T6BLUxWpJGjfHnk70ZiKyG9gPHBCRnSLi0b6cI+KS8fESapfEIbz7fzADR7m8KzLNDXAq6RQDVgwgJjmGqT2mauOhKRbsqYFMB15WSq0DEJFu5rbbHCfLtYmMTyGosj8+3vbG43Ij9i6G6i2g2s1WK9EUEycunOC5lc+RmpHKjF4zaFm1KH5QNZor2PMGLJttPACUUuuBEtr4bx8R8ckls/8j4QSc2gEtdOd5SeFg/EEGrhhIZlYms3vP1sZDU6zYY0BOiMjbIhJs/r2F4YLdI1FKERmfUjLngIQtM/43f9haHZpiYffZ3Tzz+zP4+vgyt89cGgfocMSa4sUeA/I0UBXD99X35vLTjhTlysQnp5F0OaPk+cBSypg8WPd2qFTHajWaIrLl7y08v+p5AvwDmN9nPsEVg62WpCmBXLcPRCl1DhjhBC1uQWR8CfXCe3ovxB2BTkOtVqIpImtPruWVP14huGIw03tOJ9A/0GpJmhJKvgZERH7G8LqbJ0qp+xyiyMWJiDOG8Ja4SYR7F+vAUSWAX078wlub3qJplaZM7TFVB4LSOJSCaiCfOE2FGxEZn4y3lxBUuQQZEB04qkSw+PBi3vvrPdrXaM8Xd35B2VIlrJascTnyNSBKqT+yl83Y5Tdj1EgOK6XSnKDNJQmPT6FWJT9K+5SgIbyRm43AUb3es1qJppDM2TeHz3Z+RpegLnza9VP8fPyslqTxAOzxhXUPMA04DggQIiLPK6VWOFqcKxJZEr3whi2BUmWh8d1WK9HcIEopvgz9kq/2fkXv4N58cMcHlPLWgaA0zsGeiYSfAt2VUscARKQ+8D/A4wyIUoqIuGTub13bainFR07gqHt04Cg3I0tl8fH2j/nm4Dc81PAhxnQaowNBaZyKPQbkYrbxMDkBXHSQHpfmfEo6iakZJasD/dgaSD0PLbXrEnciMyuTcVvG8cOxH/hXk38xusNo7Y5d43TsMSA7RORXYDFGH8g/ge0i8hCAUspjYqOHm0N4S1QTVthiKFMF6nWzWonGTtIz03l90+v8HvE7L7R6gaGthmrjobEEewyIH0YckK7meizgD/wDw6B4jAHJngNSYmogly/C4RXQ5l+g283dgtSMVF5e/zIbT21kVLtRDGw+0GpJGg/GnomEg5whxB2IjE9BBOqUlFnoB3+BjFTteddNSE5P5sW1L7Lj9A7G3DqGfzbS8eo11mLPKKwQjCiEwbbHe+JEwoi4ZGpV9MevVAnpqAxbApVu0oGj3IDzqecZsnoIBxMO8mHnD7m7nh4xp7Eee5qwfgRmAT8DWQ5V4+JExKcQHFhCah9JZ+HEOh04yg2ITYll8KrBnEw8yefdP6dbnW5WS9JoAPsMSKpSarLDlbgBEfHJ3N2iptUyiod9y8zAUboZxJUJvxDOkNVDSEhNYGqPqXSsqWuLGtfBHgMySUTeAVYCl7M3KqV2FSVjEfEGdgCnlFL3mk1l3wFVgJ1AP1ea8X4uOY3zKenUKylOFEMXQK02UK2J1Uo0+RB6NpTha4fjLd7M6T2HZoHNrJak0VyFPf44WgDPAR9iTCr8lOLxk/Vv4KDN+gRgolKqAXAOeKYY8ig2TsQZoeBLhBfe0/vgdBi0etJqJZp8WHtyLc+ufJaKpSvyTd9vtPHQuCT2GJB/AvWUUl2VUt3NvzuLkqmIBAH3ADPNdQHuBJaah8wDHihKHsXNiVhjCG+9quUsVlIMhH4L3qV15EEXZfHhxYxcP5JGlRvx9d1fU6eCjs+icU3sMSD7gErFnO/nwGiudMpXAc4rpTLM9WggT38hIjJYRHaIyI7Y2NhilpU/4XHJ+HgJQZX9nZanQ8hMh72LoFEf7XnXxVBK8cXuL3j3r3e5o/YdzOw1kwA/fY00ros9fSCVgEMisp2r+0AKNYxXRO4FziqldopItxs9Xyk1HZgO0L59+3zjlRQ34XHJ3BRQhlLebu6F9+gqSImD1k9ZrURjQ3pWOuM2j+On4z/xUMOHeLvT2/h42fN4ajTWYc8d+k4x53k7cJ+I3I0xy70CMAmoJCI+Zi0kCDhVzPkWifC45JLR/xG6AMpWhQZ3Wa1EY5KSnsKoP0ax6dQmhrQawpBWQ7RrEo1bcN3PaTMuSARQylzeDhR6BJZS6nWlVJBSKhh4HFirlHoKWAdkN8oPAH4qbB7FTVaWIjwumXpV3dyAJMfDkd+h5WPadYmLEH8pnqd/f5rNf2/mnVvfYWhr7ddK4z5c14CIyHMYndtfmZtqY0wuLG5eBV4WkWMYfSKzHJBHofj7wiUuZ2QREujmHej7lkJWOrR6wmolGuBk4kn6rejH8fPHmdx9Mo800oMaNO6FPU1Yw4COwFYApdRREalWHJkrpdYD683lE2Y+Lkd4XPYILDevgYQugBotoUZzq5V4PGGxYQxfOxylFDN7z6RV1VZWS9Jobhh7eoQv207oExEfDC+8HkOOAXHnPpAz+yFmj+48dwE2RG/gmZXP4O/jz/y+87Xx0Lgt9hiQP0TkDcBfRHoCSzD8YnkMJ2KTKefrQ9XyvlZLKTyh34JXKT33w2K+P/o9I9aOILhCMN/c/Q3BFYOtlqTRFBp7DMhrGDFAwoDngV+BtxwpytU4YY7ActvOzcwM2LsYGvWGsoFWq/FIlFJM2zONdza/Q6eanZjTZw6B/vpaaNwbe+KBZAEzzD+P5ERsEm1uqmy1jMJzfA0kn4XW2nWJFWRkZTB+63iWHlnKffXvY+xtYynlpUfBadwfe+KB3A6MBeqaxwuglFL1HCvNNUhNz+TU+Us83DbIaimFJ3QBlAmEhr2sVuJxXMq4xOgNo1kftZ7nWjzHi21edN+arEaTC3tGYc0CRmJ4yM10rBzX42RCCkq58QislAQjbG2HZ/XcDydzLvUcw9cOJyw2jDdueYMnbtbDpzUlC3sMyAWl1AqHK3FRTsQaXnjruesckH3LIDNNN185meiL0QxZPYSY5BgmdpvIXXX1zH9NycMeA7JORD4GvqcY44G4CyfMIbxuG4kwdAFUbwE1WlitxGM4EH+AoauHkp6VzoxeM2hTrY3VkjQah2CPAbnF/N/eZpvCcL9e4gmPTaZaeV/K+7lh88/Zg/D3buj9gdVKPIbNpzYzcv1IKvpWZHbv2dSr5BFdhRoPxZ5RWN2dIcRVCY9LJthdJxCGfgtePjpsrZP4+fjPjPlzDPUq1WNqj6lUK1MsDhs0GpclXwMiIi/n2qSAOGCTUircoapciBNxyfRuVt1qGTdOZoYR96NhbyhX1Wo1JRqlFLP2zWLSrkncUuMWJnafSPnS5a2WpdE4nIImEpbP9VcBoxlrhYg87gRtlnMhJZ2E5DSCq7hhDeT4Wkg6A631yB9HkpmVyftb32fSrkn0DenL1B5TtfHQeAz51kCUUuPy2i4iAcBq4DtHiXIVsuOgu2UY29AF4B9g1EA0DiE1I5XXNr7GmpNrGNhsICPbjcRL3DzgmEZzA9xwyDOlVIJ4yEyo7DjobhdIKiUBDv8K7QaBT2mr1ZRILly+wIi1I9h9djejO4ymX9N+VkvSaJzODRsQEekOnHOAFpcjIj4Zby/hpgA3G8K7/3tj7kcb7XnXEcQkxfDC6heIuhjFR10+ok9IH6slaTSWUFAnehjXum0PAP4G+jtSlKtwIjaZOpX9Ke3jZs0Sod9CtWZG7A9NsXI44TBDVw/lUsYlvur5FR1qdLBakkZjGQXVQO7Nta6AeKVUsgP1uBQn4pLdr/8j9jCc2gm9xoNntDQ6ja0xW3lp3UuUKVWGuX3n0qhyI6slaTSWUlAneqQzhbgaWVmKiLhkbq1XxWopN0botyDe0PJRq5WUKFaEr+CNTW8QXCGYqT2mUqNsDaslaTSWc8N9IJ7C6cRULqVnupcTxaxMc+5HTyinJ7EVF/P2z+OTHZ/QtlpbJt85mYq+Fa2WpNG4BG7WuO883DKM7fF1cDFGO04sJrJUFh9t/4hPdnxCz7o9md5rujYeGo0NugaSD9leeEPcqQYSugD8K0MjPSqoqKRlpvHGpjf4PeJ3nrz5SUZ3GI23l7fVskok6enpREdHk5qaarWUEoefnx9BQUGUKuUYX37agOTDibhkypT2pkYFP6ul2Mel83Dof9BuAPi4cex2FyAxLZGX1r3E9tPbebndywxsNlAHgXIg0dHRlC9fnuDgYF3OxYhSivj4eKKjowkJCXFIHtqA5EN4XDLBVdwoDvr+7yHzMrTSrkuKwunk0wxZPYSIxAg+6PwB99bLPRhRU9ykpqZq4+EARIQqVaoQGxvrsDy0AcmH8LhkWtR2o/bu0G+hahOopWNPFJZj547xwuoXSEpPYmqPqXSq2clqSR6DNh6OwdHlqjvR8yAtI4uohBT36UCPOwrR2w3HifpBLBQ7z+yk/2/9yVSZzO0zVxsPjcYOtAHJg5MJyWQpN3KimDP34zGrlbglqyJXMXjlYKr4VeGbu7/h5oCbrZakcTLjx4+nWbNmtGzZktatW7N161bA6EcYPHgwTZs2pUWLFmzZsuWq84KDg2nRogUtW7akV69enD59+pq0Bw4cSEhICK1bt6Z169aEhobmpD1ixAgaNGhAy5Yt2bXrSpDXefPm0bBhQxo2bMi8efMc98OLiG7CyoNsJ4puEUgqe+5Hg7ugvJ7cdqMsOLiACdsm0KpqK7648wsq+VWyWpLGyWzZsoVffvmFXbt24evrS1xcHGlpaQBs2rSJo0ePsn//flJTU0lMTLzm/HXr1hEYGMgbb7zB+++/z+TJk6855uOPP+aRRx65atuKFSs4evQoR48eZevWrQwZMoStW7eSkJDAuHHj2LFjByJCu3btuO+++6hcubJjCqAION2AiEgdYD5QHcM9ynSl1CTTTfwiIBiIAB5VSlnitDE7DrpbeOEN/wMST0Hv8VYrcSuyVBaTdk1i9r7Z3FnnTiZ0mYCfj5uMuCvBjPt5Pwf+vvYlXRSa1qrAO/9olu/+mJgYAgMD8fU1Ri8GBgbm7CtdujRnzpwhPT0df39//P39802nS5cueRqP/Pjpp5/o378/IkKnTp04f/48MTExrF+/np49exIQEABAz549+e2333jiCdcbIGNFE1YGMEop1RToBAwTkabAa8AapVRDYI25bgnhsckElitNRX83iIMe+i34VYRGfa1W4jakZ6bz5qY3mb1vNo81fozPun2mjYcH06tXL6KiomjUqBFDhw7ljz/+yNlXvXp1Ll68yMCBA1Eqt2/Zq/nll19o0aJFnvvefPNNWrZsyciRI7l8+TIAp06dok6dOjnHBAUFcerUqXy3uyJOr4EopWKAGHP5oogcBGoD9wPdzMPmAeuBV52tD4xAUvUC3aD/I/UCHPwZWj8FpfQL0B6S0pIYuX4kf8X8xYttXuS5Fs/pEUAuREE1BUdRrlw5du7cycaNG1m3bh2PPfYYH374IQMHDuSRRx5hw4YNjB8/npEjR/L5558zbNgw+vbty733GkO8u3fvjre3Ny1btuS99967Jv0PPviAGjVqkJaWxuDBg5kwYQJjxoxx9s90CJZ2ootIMNAG2ApUN40LwGmMJq68zhksIjtEZIejxjeHxyUTHOgGMUD2/wAZqdp1iZ3EpsQy6PdBbD+9nXdvf5fBLQdr46EBwNvbm27dujFu3DimTJnCsmXLOHv2LHFxcYSEhPDVV18RERHBuHHj2L59O927d885d926dYSGhjJ//nwqVap0Tdo1a9ZERPD19WXQoEFs27YNgNq1axMVFZVzXHR0NLVr1853uytimQERkXLAMuAlpdRVjZ7KqCvmWV9USk1XSrVXSrWvWrVqseu6cCmduKQ09xiBFfotBDaG2u2sVuLyhF8Ip9+KfkQmRvLFnV/wQIMHrJakcREOHz7M0aNHc9ZDQ0OpW7cuVatWRSnFunXr8Pb2Zvr06UyaNIm2bdtStqz9/aMxMcZ3sVKKH3/8kebNmwNw3333MX/+fJRS/PXXX1SsWJGaNWvSu3dvVq5cyblz5zh37hwrV66kd2/XDE1tySgsESmFYTwWKKW+NzefEZGaSqkYEakJnLVCW4TZgR5cxcU70OOPQ9RW6DFWz/24DqFnQxm+djje4s2c3nNoFuj8ZhKN65KUlMSLL77I+fPn8fHxoUGDBkyfPh0RYdmyZYwYMYKUlBTKlCnDlClT+Oijj1i6dOk1o6ry46mnniI2NhalFK1bt2batGkA3H333fz66680aNCAMmXKMGfOHAACAgJ4++236dDBCFY2ZsyYnA51V0Ou1zFU7BkabQbzgASl1Es22z/GCFj1oYi8BgQopUYXlFb79u3Vjh07ilXfj7tP8dKiUFaN7ELD6uWLNe1iZc27sOkzGHkAKtS0Wo3LsvbkWkZvGE31MtWZ1mMadSrUuf5JGqdy8OBBmjRpYrWMEkte5SsiO5VS7YuathU1kNuBfkCYiISa294APgQWi8gzQCRgSUSkE7FJeAncVMWF+0CyMmHPd1D/Tm08CmDx4cWM3zqeZlWaMeWuKQT4ueZXnEbjrlgxCmsTkF+by13O1JIXJ+KSCapcBl8fF3bdHb4BEqOh17tWK3FJlFJMCZ3C9L3T6Vy7M590/YQypVz4g0CjcVP0TPRchMclu/4Ewj0Ljbkfje+2WonLkZ6Vzn+3/Jcfj/3Iww0f5q1Ob+HjpW9zjcYR6CfLBqUU4XHJdAxx4aaO1EQ4sNxwnKjnflxFSnoKL//xMn+e+pMhrYYwpNUQPUxXo3Eg2oDYcPbiZVLSMl3bC++BHyHjkjF5UJND3KU4hq8ZzsGEg7xz6zs80si+ETIajabwaANiw3EzjK1LzwEJ/RaqNNRzP2w4mXiS51c9T9ylOCZ1n0S3Ot2slqTReATanbsN4a7uRDH+OJzcYsw8100zAOyL20e/Ff1ISk9iVu9Z2nhoCoWIMGrUqJz1Tz75hLFjx151TOvWrXn88cev2vbXX39xyy230Lp1a5o0aZJzzty5c6latSpt2rShYcOG9O7dm82bN191blxcHKVKlcqZF5JNdHQ0999/Pw0bNqRevXoMHz48x3+Wq6ENiA0nYpPxK+XlunHQ93wHiI77YbIhegNP//40/j7+fN33a1pWbWm1JI2b4uvry/fff09cXFye+w8ePEhmZiYbN24kOTk5Z/uAAQOYPn06oaGh7Nu3j0cfvTL74LHHHmP37t0cPXqU1157jYceeoiDBw/m7F+yZAmdOnVi4cKFOduUUjz00EM88MADOa7eL126xOjRBU6JswzdhGVDdhx0Ly8X/LrPyjJGX9XvDhVd0y+OM/nh6A+M2zKORpUb8X89/o9A/8Drn6RxfVa8BqfDijfNGi2g74cFHuLj48PgwYOZOHEi48dfGxph4cKF9OvXj4MHD/LTTz/x5JOG/7mzZ89Ss6YxF8vb25umTZvmmX737t0ZPHgw06dPZ+LEiTlpfvrppzz55JNER0cTFBTE2rVr8fPzY9CgQTlpTpw4kbp16zJ+/HjKlXOt5nVdA7HhRGwS9aq6aPNVxEa4EAWtPNtxolKKaXumMWbzGG6peQtz+szRxkNTLAwbNowFCxZw4cKFa/YtWrSIxx9/nCeeeOKqGsPIkSNp3LgxDz74IF999RWpqan5pt+2bVsOHToEQFRUFDExMXTs2JFHH32URYsWAbB//37atbu6f7NChQoEBwdz7Nix4viZxYqugZikZWQRde4S97asZbWUvNmzEHwrQJN7rVZiGRlZGYzfOp6lR5ZyX/37GHvbWEp5uUHMFo39XKem4EgqVKhA//79mTx58lWBo3bs2EFgYCA33XQTtWvX5umnnyYhIYGAgADGjBnDU089xcqVK/n2229ZuHAh69evzzN9W7dRixYtymnuevzxx3n66aev6oNxF3QNxCTqXAqZWco1O9AvX4QDP0GzB6FU/hHRSjKXMi4xct1Ilh5ZyrMtnuW929/TxkNT7Lz00kvMmjXrqn6OhQsXcujQIYKDg6lfvz6JiYksW7YsZ3/9+vUZMmQIa9asYc+ePcTHx+eZ9u7du3N8Ui1cuJC5c+cSHBzMfffdx969ezl69ChNmzZl586dV52XmJjI6dOnady4sQN+cdHQBsQk3IyD7pJNWAeWQ3oKtPmX1Uos4VzqOZ5d+Sx/RP/BG7e8wb/b/ltPENQ4hICAAB599FFmzZoFQFZWFosXLyYsLIyIiAgiIiL46aefcpqx/ve//+XULI4ePYq3t3eeMUH++OMPpk+fznPPPceRI0dISkri1KlTOWm+/vrrLFy4kLvuuouUlBTmz58PQGZmJqNGjWL48OEFhtO1Cm1ATFx6CG/ot1ClAQR1sFqJ04m+GE3/Ff05FH+Iid0m8sTNrhcXWlOyGDVqVM5orI0bN1K7dm1q1brStN2lSxcOHDhATEwMX3/9NY0bN6Z169b069ePBQsW4O1t+NFbtGgRrVu3plGjRrz//vssW7aMJk2asHDhQh588MGr8nz44YdZuHAhIsIPP/zA0qVLadiwIVWqVMHLy4s333zTeQVwAzjdnXtxUpzu3F//fi+/7z/Drrd7Fkt6xUZCOExuDXe+DV1esVqNUzkQf4Chq4eSnpXOlLum0KZaG6slaRyAdueeP5s3b+aJJ57ghx9+oG3btoVKo6S5c3dJTsS6qBPF7LkfrR6/7qElic2nNjNy/Ugq+lZkdu/Z1KtUz2pJGo3Tue2224iMjLRaRr7oJiyTE3HJrucDKysL9nwL9bpCxSCr1TiNn4//zLA1wwgqH8Q3d3+jjYdG46JoAwJcTE0n9uJlgl3NgJzcDOdPeszcD6UUM8Nm8samN2hbvS1z+8ylWplqVsvSaDT5oJuwgIi4FADqu9oIrNBvoXR5aPIPq5U4nMysTCZsn8DCQwvpG9KX925/j9Lepa2WpdFoCkAbEOBEnOGFNyTQhdwEXE6C/T9C84egdMmOppeakcrrG19n9cnVDGw2kJHtRuIlunKs0bg62oBgDOEVgbquFAf94HJITy7xcT8uXL7AiLUj2H12N6M7jKZf035WS9JoNHaiDQjGCKxaFf3xK+VCcdBDv4XKIXBTJ6uVOIyYpBheWP0CURej+KjrR/QJ7mO1JI2H4u3tTYsWLUhPT8fHx4f+/fszcuRIvLyKryZcrlw5kpKSii09V0AbEIwaiEvNQD8XaThP7P5miY37cTjhMENXD+VSxiW+6vkVHWp43iRJjevg7+9PaGgoYHjYffLJJ0lMTGTcuHHWCnNxPNKAnElM5ec9f/Ns53o5cdAfbuskF+kZl2HzF9D+aSiTT+z1nLkfzp11feHyBZYfX079SvVpWKkhgf6BDnEZsi1mG/9e92/KlCrD3L5zaVS5UbHnoXFPJmybwKGEQ8Wa5s0BN/Nqx1ftPr5atWpMnz6dDh06MHbsWC5fvsyQIUPYsWMHPj4+fPbZZ3Tv3p177rmHDz74gJYtW9KmTRsefPBBxowZw5gxY6hTpw7PPfdcnukrpRg9ejQrVqxARHjrrbd47LHHWL9+PWPHjiUwMJB9+/bRrl07vvnmG0SEnTt38vLLL5OUlERgYCBz586lZs2aTJ48mWnTpuHj40PTpk357rvviqvY7MIjDcji7VF8uuoIVcv7cmu9KiRdznBeGNvwDbD2XfhzMvQYA+2fubqWoZQx9yOkM1Sq4xxNJocTDvPR9o9y1gP8AmgS0IRmgc3oWKMjraq2ws+naMG2VoSv4I1NbxBcIZipPaZSo2yNosrWaIqdevXqkZmZydmzZ3Ne4mFhYRw6dIhevXpx5MgROnfuzMaNG6lbty4+Pj78+eefgOH+JHeUQVu+//57QkND2bNnD3FxcXTo0IEuXboAhsPF/fv3U6tWLW6//Xb+/PNPbrnlFl588UV++uknqlatyqJFi3jzzTeZPXs2H374IeHh4fj6+nL+/HlnFM1VeKQBGdKtPqsPneX9Xw8y4WEjip3TZqE37Akv/Akr34T/jYKITXDfFPA1DdjJLXAuArq97hw9NnSs2ZH1j67n+PnjHD1/lMMJhzmYcJBZYbOYvnc6pb1K07paazrW6MgtNW+hWWAzuz3iKqWYt38en+78lHbV2zGp+yQq+lZ08C/SuBs3UlNwFps2beLFF18E4Oabb6Zu3bo5BmTy5MmEhIRwzz33sGrVKlJSUggPDy/Qc+6mTZt44okn8Pb2pnr16nTt2pXt27dToUIFOnbsSFCQMWm4devWREREUKlSJfbt20fPnoabpczMzJwgVi1btuSpp57igQce4IEHHnBsQeSBRxoQH28vXutzM0/M+It3fzkAONkLb43m8K8f4M/PjdrImQPw+LcQ2AB2fW3p3I8q/lWo4l+FjjU75mxLTk9m55mdbI3ZyrbT25gSOoUpoVMo41OGdtXbcVut27it9m2EVAjJs8krIyuD97e+z5IjS+hVtxfvd34fX29fZ/4sjeaGOHHiBN7e3lSrlv9E1g4dOrBjxw7q1atHz549iYuLY8aMGdcEhLoRfH2vPBfe3t5kZGSglKJZs2Zs2bLlmuP/97//sWHDBn7++WfGjx9PWFgYPj7Oe6177GD7W+tX4dZ6VTgem4y3l1CropNdJXt5QeeXod+PkBwLM++C/T/AgR+hxcNQ2nU69cuWKkuXoC78p8N/WPKPJWx4bAOfdfuMf9T/BycvnmTC9gnc/+P99P2+L+9vfZ8/ov7gfOp5MrIyWB+1nmd+f4YlR5bwTPNn+Ljrx9p4aFya2NhYXnjhBYYPH46I0LlzZxYsWADAkSNHOHnyJI0bN6Z06dLUqVOHJUuWcOutt9K5c2c++eSTnOao/OjcuTOLFi0iMzOT2NhYNmzYQMeOHfM9vnHjxsTGxuYYkPT0dPbv309WVhZRUVF0796dCRMmcOHCBaeP8vLIGkg2w7o3YMuJeCr4+VgXB71eVxi8Dr55BJYMBC8fuGWINVrspLJfZXrW7UnPukaVOvpiNJv/3szG6I38cPQHFh4yYiWULVWW5PRkAv0D+e9t/+XBhg8WlKxGYxmXLl2idevWOcN4+/Xrx8svvwzA0KFDGTJkCC1atMDHx4e5c+fm1BQ6d+7MmjVr8Pf3p3PnzkRHR9O5c+dr0s/IyMg558EHH2TLli20atUKEeGjjz6iRo0aOeFuc1O6dGmWLl3KiBEjuHDhAhkZGbz00ks0atSIf/3rX1y4cAGlFCNGjMgzFokjcSl37iLSB5gEeAMzlVIFxrcsqjt3pRT/t/44HYID6BiSz4goZ5GaCJs+g5CuUL+7tVqKQGpGKmFxYeyJ3UPUxSi6BnWlc1BnHT1Qky+e4M59z549PPfcc2zbts3peXuEO3cR8Qa+BHoC0cB2EVmulDrgwDwZ1r2Bo5K/MfwqQI+xVqsoMn4+fnSo0UHP69BoTKZNm8bkyZP5/PPPrZZS7LhSH0hH4JhS6oRSKg34DrjfYk0ajUZTJF544QUOHDhAr169rJZS7LiSAakNRNmsR5vbrkJEBovIDhHZERsb6zRxGo3GcbhSU3pJwtHl6koGxC6UUtOVUu2VUu2rVq1qtRyNRlNE/Pz8iI+P10akmFFKER8fj59f0Sb/FoTL9IEApwDbqddB5jaNRlOCCQoKIjo6Gt2iUPz4+fnlTEx0BK5kQLYDDUUkBMNwPA54Rig+jcaDKVWqFCEhIVbL0BQClzEgSqkMERkO/I4xjHe2Umq/xbI0Go1Gkw8uY0AAlFK/Ar9arUOj0Wg018ftOtE1Go1G4xq41Ez0G0VEYoHIfHYHAnFOlHOjuLI+ra1waG2FQ2srHEXRVlcpVeRhrG5tQApCRHYUx1R9R+HK+rS2wqG1FQ6trXC4gjbdhKXRaDSaQqENiEaj0WgKRUk2INOtFnAdXFmf1lY4tLbCobUVDsu1ldg+EI1Go9E4lpJcA9FoNBqNA9EGRKPRaDSFokQaEBHpIyKHReSYiLzmxHwjRCRMREJFZIe5LUBEVonIUfN/ZXO7iMhkU+NeEWlrk84A8/ijIjKgkFpmi8hZEdlns63YtIhIO/O3HjPPtTsmcD7axorIKbPsQkXkbpt9r5v5HBaR3jbb87zOIhIiIlvN7YtEpPQNaKsjIutE5ICI7BeRf7tK2RWgzfKyExE/EdkmIntMbeMKSk9EfM31Y+b+4MJqLoK2uSISblNurc3tzn4evEVkt4j84iplZjdKqRL1h+FH6zhQDygN7AGaOinvCCAw17aPgNfM5deACeby3cAKQIBOwFZzewBwwvxf2VyuXAgtXYC2wD5HaAG2mceKeW7fImobC7ySx7FNzWvoC4SY19a7oOsMLAYeN5enAUNuQFtNoK25XB44YmqwvOwK0GZ52Zm/pZy5XArYav7GPNMDhgLTzOXHgUWF1VwEbXOBR/I43tnPw8vAt8AvBV0DZ5aZvX8lsQbiapEN7wfmmcvzgAdsts9XBn8BlUSkJtAbWKWUSlBKnQNWAX1uNFOl1AYgwRFazH0VlFJ/KeMOnm+TVmG15cf9wHdKqctKqXDgGMY1zvM6m19+dwJL8/id9miLUUrtMpcvAgcxAptZXnYFaMsPp5Wd+fuTzNVS5p8qID3b8lwK3GXmf0Oai6gtP5x2TUUkCLgHmGmuF3QNnFZm9lISDYhdkQ0dhAJWishOERlsbquulIoxl08D1c3l/HQ6Un9xaaltLhe3xuFmk8FsMZuICqGtCnBeKZVRVG1mE0EbjC9Wlyq7XNrABcrObIoJBc5ivFyPF5BejgZz/wUzf4c8F7m1KaWyy228WW4TRcQ3tzY7NRTlmn4OjAayzPWCroFTy8weSqIBsZI7lFJtgb7AMBHpYrvT/DpxiXHTrqTFZCpQH2gNxACfWilGRMoBy4CXlFKJtvusLrs8tLlE2SmlMpVSrTGCwXUEbrZCR17k1iYizYHXMTR2wGiWetWZmkTkXuCsUmqnM/MtTkqiAbEssqFS6pT5/yzwA8ZDdMas4mL+P3sdnY7UX1xaTpnLxaZRKXXGfMizgBkYZVcYbfEYTQ4+ubbbjYiUwnhBL1BKfW9udomyy0ubK5Wdqec8sA64tYD0cjSY+yua+Tv0ubDR1sdsElRKqcvAHApfboW9prcD94lIBEbz0p3AJFyszAqkMB0nrvyHEePkBEZnUnbHUTMn5FsWKG+zvBmj7+Jjru58/chcvoerO+q2qSsddeEYnXSVzeWAQmoK5uqO6mLTwrWdhncXUVtNm+WRGG26AM24uoPwBEbnYL7XGVjC1Z2QQ29Al2C0YX+ea7vlZVeANsvLDqgKVDKX/YGNwL35pQcM4+oO4cWF1VwEbTVtyvVz4EMLn4duXOlEt7zM7NZdnIm5yh/GKIojGG2wbzopz3rmBdoD7M/OF6ONcg1wFFhtc8MJ8KWpMQxob5PW0xgdYceAQYXUsxCjOSMdo+3zmeLUArQH9pnnTMH0alAEbV+bee8FlnP1S/FNM5/D2Ixuye86m9dim6l5CeB7A9ruwGie2guEmn93u0LZFaDN8rIDWgK7TQ37gDEFpQf4mevHzP31Cqu5CNrWmuW2D/iGKyO1nPo8mOd344oBsbzM7P3Trkw0Go1GUyhKYh+IRqPRaJyANiAajUajKRTagGg0Go2mUGgDotFoNJpCoQ2IRqPRaAqFNiAahyIib5oeUPeaHk9vMbe/JCJlCpnmWBF5xY5jlIg0sNn2krmt/Q3mt97ec0QkWESeLGDfvrz2FZDeQBGZciPn5JFGVxHZkmubj4icEZFa+ZzTLds7rEaTH9qAaByGiNyKMWGrrVKqJdCDK755XgIKZUBugDCMCVfZ/BNjjo7diIj3DeYZDORpQCxkIxAkInVttvUA9iul/rZIk6YEoA2IxpHUBOKU4SoCpVScUupvERkB1ALWicg6ABF5woynsE9EJmQnYMYz2CVGLIc1uTMQkedEZIWI+OeR/4+Y3kdFpD6G87k4m3OnisgOsYkRYW6PEJEJIrILw+hkb/cSI4bEe6Zzvo9FZLtZu3rePOxDoLNZ2xqZX8GYNYvvReQ3MWJLfGSzb5CIHBGRbRjuLrK3VxWRZWae20XkdnP7TyLS31x+XkQW2OalDBcni7namD4OLBSRjiKyRYx4FJtFpHEeWq+q8ZnXKNhc/pcYsTZCReSrQhhcjTtT3DMT9Z/+y/4DymHMlj4C/B/Q1WZfBGbsFAxjchLD5YQPxgzhB8z1KCDEPC579vdY4BVgOPATecyWtjnme6A5xkzdAcB6zJnFNul5m9tb2mgbbZPWegw3FQu54mFgMPCWuewL7MBwGdENc0ZxHpqCMd23AAMx3ExUxJhhHInht6imTVmUBv4EppjnfIvhsBPgJuCguVwdY3ZyZ7Osr3F9gzFTereN3rMYrjkqAD7m9h7AMnM553eQK94IxozrYKAJ8DNQytz+f0B/q+87/ee8v2yHXRpNsaOUShKRdhgvtu7AIhF5TSk1N9ehHYD1SqlYAPMLuguQCWxQRowDlFK2MUT6YxiXB5RS6QXI+A7ja7s3cBcwyGbfo2K43ffBeHE3xXB3AbAoVzpfYfgeGm+u9wJaisgj5npFoCGQVoCW3KxRSl0AEJEDQF0gkKvLYhHQyDy+B9BUrgS7qyAi5ZRSZ0RkDIaTwAdzlRMASqkdIlLOrGE0wQiSlCAidYB5ItIQw01KqRvQfxfQDthuavLnipNJjQegDYjGoSilMjG+4NeLSBhGLWBuMSQdhuG+PAjDqV1+/ILhCHGHUiox++UrIiEYNZQOSqlzIjIXoyaQTXKudDYD3UXkU6VUKoa/pBeVUr/bHiQi3W7gN1y2Wc7k+s+jF9DJzD83LTA8s+bZKW6yEMOYNjGXAd4F1imlHjSbpdbncV4GVzd3Z5eTAPOUUq9fR7emhKL7QDQOQ0Qam1+22bTGaKoBuIgRlhUMx3BdRSTQbEN/AvgD+AvoYr7sEZEAm7R2A88Dy/MbSQSglErBiPMwPteuChhG4oKIVMeI4VIQs4BfgcViuNL+HRgihnt1RKSRiJTN9bsKw1aMsqhipv1Pm30rgRezV+RKDO+Opv42wCvZ5ZUHC4F/YbgN/8ncVpErLr4H5nNeBEYIYsSID56d/hrgERGpZu4LyNVRrynhaAOicSTlMJpHDojIXq7E7waYDvwmIuuUEenvNYwmmD3ATqXUT2YzzmDgexHZQ65mJaXUJoxaxP9EJDA/EUqp75QZCtZm2x4MI3QIo2/hz+v9GKXUZ+Y5X2OEID0A7BJjaO5XGDWIvUCm2emfbyd6AXnEYJTRFlPTQZvdI4D2Zqf9AeAFMaLozQCeVsaIqlHAbLFp57JJ+yCG0VyrlMquYX0EfCAiu8m/BrQMCBCR/Rj9TkfM9A4Ab2FE4dyLEYWw5o3+Zo37or3xajQajaZQ6BqIRqPRaAqFNiAajUajKRTagGg0Go2mUGgDotFoNJpCoQ2IRqPRaAqFNiAajUajKRTagGg0Go2mUPw/jpBEucCPsqUAAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv('/content/Unemployment Rate, S&P 500 Index, N sr.txt')\n",
        "\n",
        "# Split the dataset into input features and target variable\n",
        "X = df.drop('Unemployment Rate', axis=1)\n",
        "y = df['Unemployment Rate']\n",
        "\n",
        "# Normalize the input features using MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "X = scaler.fit_transform(X)\n",
        "\n",
        "# Create a neural network model\n",
        "model = Sequential()\n",
        "model.add(Dense(8, input_dim=X.shape[1], activation='relu'))\n",
        "model.add(Dense(4, activation='relu'))\n",
        "model.add(Dense(1, activation='linear'))\n",
        "model.compile(loss='mean_squared_error', optimizer='adam')\n",
        "\n",
        "# Train the model on the entire dataset\n",
        "model.fit(X, y, epochs=100, batch_size=2)\n",
        "\n",
        "# Predict the unemployment rate using stock data\n",
        "snp = 4000.0  # S&P 500 index value\n",
        "nasdaq = 12000.0  # NASDAQ index value\n",
        "dow = 30000.0  # Dow Jones index value\n",
        "\n",
        "# Normalize the input features using the same scaler used for the dataset\n",
        "input_data = scaler.transform([[snp, nasdaq, dow]])\n",
        "\n",
        "# Make predictions using the trained model\n",
        "unemployment_rate_pred = model.predict(input_data)[0][0]\n",
        "print('Predicted Unemployment Rate:', unemployment_rate_pred)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uuOI3e2Ty57q",
        "outputId": "d475ce27-079e-4b34-cf2c-7d72df0f66dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "12/12 [==============================] - 1s 3ms/step - loss: 54.5014\n",
            "Epoch 2/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 53.5593\n",
            "Epoch 3/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 52.5748\n",
            "Epoch 4/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 51.4802\n",
            "Epoch 5/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 50.2812\n",
            "Epoch 6/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 48.9063\n",
            "Epoch 7/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 47.4508\n",
            "Epoch 8/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 45.8728\n",
            "Epoch 9/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 44.2933\n",
            "Epoch 10/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 42.6661\n",
            "Epoch 11/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 40.9886\n",
            "Epoch 12/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 39.2646\n",
            "Epoch 13/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 37.5064\n",
            "Epoch 14/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 35.7525\n",
            "Epoch 15/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 34.0101\n",
            "Epoch 16/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 32.1914\n",
            "Epoch 17/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 30.4555\n",
            "Epoch 18/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 28.7121\n",
            "Epoch 19/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 27.0111\n",
            "Epoch 20/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 25.3483\n",
            "Epoch 21/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 23.7151\n",
            "Epoch 22/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 22.1972\n",
            "Epoch 23/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 20.7148\n",
            "Epoch 24/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 19.3330\n",
            "Epoch 25/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 17.9858\n",
            "Epoch 26/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 16.8462\n",
            "Epoch 27/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 15.6931\n",
            "Epoch 28/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 14.6549\n",
            "Epoch 29/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 13.6111\n",
            "Epoch 30/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 12.7464\n",
            "Epoch 31/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 11.8299\n",
            "Epoch 32/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 11.3417\n",
            "Epoch 33/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 10.6442\n",
            "Epoch 34/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 10.2192\n",
            "Epoch 35/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 9.9070\n",
            "Epoch 36/100\n",
            "12/12 [==============================] - 0s 4ms/step - loss: 9.6845\n",
            "Epoch 37/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 9.4163\n",
            "Epoch 38/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 9.2137\n",
            "Epoch 39/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 9.0747\n",
            "Epoch 40/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 8.9329\n",
            "Epoch 41/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.8101\n",
            "Epoch 42/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.7020\n",
            "Epoch 43/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.5983\n",
            "Epoch 44/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.4828\n",
            "Epoch 45/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 8.4147\n",
            "Epoch 46/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.3026\n",
            "Epoch 47/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.2126\n",
            "Epoch 48/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.1223\n",
            "Epoch 49/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 8.0404\n",
            "Epoch 50/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.9287\n",
            "Epoch 51/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.8687\n",
            "Epoch 52/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.7517\n",
            "Epoch 53/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 7.6616\n",
            "Epoch 54/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.5689\n",
            "Epoch 55/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.4640\n",
            "Epoch 56/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.3707\n",
            "Epoch 57/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.3149\n",
            "Epoch 58/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.1822\n",
            "Epoch 59/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 7.1053\n",
            "Epoch 60/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 7.0329\n",
            "Epoch 61/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.9505\n",
            "Epoch 62/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.8184\n",
            "Epoch 63/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.7393\n",
            "Epoch 64/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.6437\n",
            "Epoch 65/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.5658\n",
            "Epoch 66/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.4767\n",
            "Epoch 67/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.3930\n",
            "Epoch 68/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.3008\n",
            "Epoch 69/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.1995\n",
            "Epoch 70/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.1158\n",
            "Epoch 71/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 6.0292\n",
            "Epoch 72/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 5.9454\n",
            "Epoch 73/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 5.8649\n",
            "Epoch 74/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 5.7788\n",
            "Epoch 75/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 5.7114\n",
            "Epoch 76/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 5.6114\n",
            "Epoch 77/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 5.5316\n",
            "Epoch 78/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 5.4623\n",
            "Epoch 79/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 5.3699\n",
            "Epoch 80/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 5.2952\n",
            "Epoch 81/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 5.2139\n",
            "Epoch 82/100\n",
            "12/12 [==============================] - 0s 3ms/step - loss: 5.1561\n",
            "Epoch 83/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 5.0528\n",
            "Epoch 84/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.9882\n",
            "Epoch 85/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.8967\n",
            "Epoch 86/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.8220\n",
            "Epoch 87/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.7541\n",
            "Epoch 88/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.6742\n",
            "Epoch 89/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.5963\n",
            "Epoch 90/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.5423\n",
            "Epoch 91/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.4540\n",
            "Epoch 92/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.3787\n",
            "Epoch 93/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.3059\n",
            "Epoch 94/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.2351\n",
            "Epoch 95/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.1678\n",
            "Epoch 96/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.0879\n",
            "Epoch 97/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 4.0289\n",
            "Epoch 98/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 3.9504\n",
            "Epoch 99/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 3.8860\n",
            "Epoch 100/100\n",
            "12/12 [==============================] - 0s 2ms/step - loss: 3.8083\n",
            "1/1 [==============================] - 0s 62ms/step\n",
            "Predicted Unemployment Rate: 96.24428\n"
          ]
        }
      ]
    }
  ]
}